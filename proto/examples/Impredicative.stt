
-- Awodey-Frey-Speight encoding for natural numbers
-- https://www.andrew.cmu.edu/user/awodey/preprints/impred.pdf

-- The AWS-encoding works with funext and impredicative Set. We have Set:Set and
-- funext, so it works here as well, but since our funext computes, our
-- eliminators fully compute on closed values (elim β-rules for open canonical
-- terms are not definitional though).

-- lib
--------------------------------------------------------------------------------

let id   : {A : Set}  → A → A = λ x. x in
let idP  : {A : Prop} → A → A = λ x. x in
let the  : (A : Set)  → A → A = λ A x. x in
let theP : (A : Prop) → A → A = λ A x. x in

let tr : {A:Set}(B : A → Set){x y} → Eq x y → B x → B y
  = λ B p. coe (ap B p) in

let isContr : Set → Set
  = λ A. (a : A) × ((b : A) → Eq b a) in

let Sing : {A : Set} → A → Set
  = λ a. (b : _) × Eq a b in

let singContr : {A a} → isContr (Sing {A} a)
  = λ {A}{a}. ((a, refl), λ s. sym (s.₂)) in


-- Lifting Prop to Set

let Lift  : Prop → Set = λ P. Sing Set × P in
let lift  : {P} → P → Lift P = λ p. ((Set, refl), p) in
let lower : {P} → Lift P → P = λ lp. lp.₂ in

-- this direction is propositional, the other
-- one is definitional (and cannot be even stated internally, using Eq)
let liftlower : {P}(p : Lift P) → Eq (lift (lower p)) p
  = λ p. p.₁.₂ in

-- AFS natural numbers
--------------------------------------------------------------------------------

let Conᴺ : Set
  = (N : Set) × (z : N) × (s : N → N) × ⊤ in

let Subᴺ : Conᴺ → Conᴺ → Set
  = λ Γ Δ. (N : Γ.N → Δ.N)
         × (z : Eq (N (Γ.z)) (Δ.z))
	 × (s : (n : Γ.N) → Eq (N (Γ.s n)) (Δ.s (N n)))
	 × ⊤ in

let Tyᴺ : Conᴺ → Set
  = λ Γ.  (N : Γ.N → Set)
        × (z : N (Γ.z))
	× (s : {n} → N n → N (Γ.s n))
	× ⊤ in

let nat : Set
  = (f : (Γ : Conᴺ) → Γ.N)
  × ((Γ Δ : Conᴺ)(σ : Subᴺ Γ Δ) → Eq (σ.N (f Γ)) (f Δ)) in

let Z : nat
  = (λ Γ. Γ.z, λ _ _ σ. σ.z) in

let S : nat → nat
  = λ n. (λ Γ. Γ.s (n.₁ Γ),
          λ Γ Δ σ. trans (σ.s (n.₁ Γ)) (ap (Δ.s) (n.₂ Γ Δ σ))) in

let syn : Conᴺ
  = (nat, (Z, (S, _))) in

let rec : (Γ : Conᴺ) → Subᴺ syn Γ
  = λ Γ. (λ n. n.₁ Γ, (refl, (λ _. refl, _))) in

let recZβ : (Γ : Conᴺ) → Eq (rec Γ .₁ Z) (Γ.z)
  = λ _. refl in

let recSβ : (Γ : Conᴺ)(n : nat) → Eq (rec Γ .₁ (S n)) (Γ.s (rec Γ .₁ n))
  = λ _ _. refl in

let Ind : (A : Tyᴺ syn) → (n : nat) → A.₁ n
  = λ A n.
  let Γ : Conᴺ
    = ((n : nat) × A.N n, ((Z, A.z), (λ np. (S (np.₁), A.s (np.₂)), _))) in
  let res = n.₁ Γ in
  let proj1 : Subᴺ Γ syn = (λ n. n.₁, (refl, (λ _. refl, _))) in
  let lem : Eq (res.₁) n = trans (n.₂ Γ syn proj1) (λ Γ. n.₂ syn Γ (rec Γ)) in
  coe (ap (A.N) lem) (res.₂) in

-- injectivity of S + β for Ind are not definitional

let add : nat → nat → nat
  = rec (nat → nat, (id, (λ f b. S (f b), _))) .₁ in

let mul : nat → nat → nat
  = rec (nat → nat, (λ b. Z, (λ nmul b. add b (nmul b), _))) .₁ in

let n5  : nat = S (S (S (S (S Z)))) in
let n10 : nat = add n5 n5 in
let n100 : nat = mul n10 n10 in

-- proof about numbers!!
-- it's probably the most practical to write functions using rec and irrelevant
-- proofs using Ind
let add0 : (n : nat) → Eq n (add n Z)
  = λ n. lower
    (Ind (λ n. Lift (Eq n (add n Z)), (lift refl, (λ p. lift (ap S (lower p)), _))) n)
  in

-- Church naturals
--------------------------------------------------------------------------------

let Cnat : Set = (N : Set) → N → (N → N) → N in
let cZ : Cnat = λ N z s. z in
let cS : Cnat → Cnat = λ a N z s. s (a N z s) in
let cadd : Cnat → Cnat → Cnat = λ a b N z s. a N (b N z s) s in
let cmul : Cnat → Cnat → Cnat = λ a b N z s. a N z (λ x. b N x s) in

let c5 : Cnat = cS (cS (cS (cS (cS cZ)))) in
let c10 : Cnat = cadd c5 c5 in
let c100 : Cnat = cmul c10 c10 in

let n2c : nat → Cnat
  = λ n. n .₁ (Cnat, (cZ, (λ n. cS n, _))) in

n2c n100
