
id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))


id : {A} → A → A
 := λ x. x

idTest : {A} → A → A
 := id id id id id id id id id id id id id id id id id id id id
   id id id id id id id id id id id id id id id id id id id id

Nat : Set
 := (n : Set) → (n → n) → n → n

zero : Nat
 := λ n s z. z

suc : Nat → Nat
 := λ a n s z. s (a n s z)

Vec : Set → Nat → Set
 := λ a n. (V : Nat → Set) → V zero → ({n} → a → V n → V (suc n)) → V n

vnil : {a} → Vec a zero
 := λ V n c. n

vcons : {a n} → a → Vec a n → Vec a (suc n)
 := λ a as V n c. c a (as V n c)

vec1 := (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero (vcons zero
       (vcons zero (vcons zero vnil))))))))))))))))))))))))))))))))

Pair : Set → Set → Set
 := λ A B. (Pair : Set)(pair : A → B → Pair) → Pair

pair : {A B} → A → B → Pair A B
 := λ a b Pair pair. pair a b

proj1 : {A B} → Pair A B → A
 := λ p. p _ (λ x y. x)

proj2 : {A B} → Pair A B → B
 := λ p. p _ (λ x y. y)

Top : Set
 := (Top : Set)(ttt : Top) → Top

ttt : Top
 := λ Top ttt. ttt

Bot : Set
 := (Bot : Set) → Bot

Ty : Set
 := (Ty  : Set)
   (ι   : Ty)
   (fun : Ty → Ty → Ty)
 → Ty

ι : Ty
 := λ _ ι _. ι

fun : Ty → Ty → Ty
 := λ A B Ty ι fun. fun (A Ty ι fun) (B Ty ι fun)

Con : Set
 := (Con : Set)
   (nil  : Con)
   (cons : Con → Ty → Con)
 → Con

nil : Con
 := λ Con nil cons. nil

cons : Con → Ty → Con
 := λ Γ A Con nil cons. cons (Γ Con nil cons) A

Var : Con → Ty → Set
 := λ Γ A.
   (Var : Con → Ty → Set)
   (vz  : {Γ A} → Var (cons Γ A) A)
   (vs  : {Γ B A} → Var Γ A → Var (cons Γ B) A)
 → Var Γ A

vz : {Γ A} → Var (cons Γ A) A
 := λ Var vz vs. vz

vs : {Γ B A} → Var Γ A → Var (cons Γ B) A
 := λ x Var vz vs. vs (x Var vz vs)

Tm : Con → Ty → Set
 := λ Γ A.
   (Tm  : Con → Ty → Set)
   (var : {Γ A} → Var Γ A → Tm Γ A)
   (lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B))
   (app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B)
 → Tm Γ A

var : {Γ A} → Var Γ A → Tm Γ A
 := λ x Tm var lam app. var x

lam : {Γ A B} → Tm (cons Γ A) B → Tm Γ (fun A B)
 := λ t Tm var lam app. lam (t Tm var lam app)

app : {Γ A B} → Tm Γ (fun A B) → Tm Γ A → Tm Γ B
 := λ t u Tm var lam app. app (t Tm var lam app) (u Tm var lam app)

EvalTy : Ty → Set
 := λ A. A _ Bot (λ A B. A → B)

EvalCon : Con → Set
 := λ Γ. Γ _ Top (λ Δ A. Pair Δ (EvalTy A))

EvalVar : {Γ A} → Var Γ A → EvalCon Γ → EvalTy A
 := λ x. x (λ Γ A. EvalCon Γ → EvalTy A)
          (λ env. proj2 env)
	  (λ rec env. rec (proj1 env))

EvalTm : {Γ A} → Tm Γ A → EvalCon Γ → EvalTy A
 := λ t. t _
          EvalVar
	  (λ t env α. t (pair env α))
	  (λ t u env. t env (u env))

test : Tm nil (fun (fun ι ι) (fun ι ι))
  := lam (lam (app (var (vs vz)) (app (var (vs vz))
             (app (var (vs vz)) (app (var (vs vz))
	     (app (var (vs vz)) (app (var (vs vz)) (var vz))))))))